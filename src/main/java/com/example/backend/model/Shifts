package com.example.backend.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jakarta.validation.constraints.PositiveOrZero;
import java.time.LocalDateTime;
import lombok.Data;
import lombok.AccessLevel;
import lombok.FieldDefaults;
import java.util.Set;

@Entity
@Data
@Table(name = "Shifts") 
@FieldDefaults(level = AccessLevel.PRIVATE)
public class Shifts {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ShiftsID")
    private int shiftsID;

    @ManyToOne
    @JoinColumn(name = "EmployeeID", referencedColumnName = "UserID", nullable = false)
    private User employee;

    @ManyToOne
    @JoinColumn(name = "CreatedBy", referencedColumnName = "UserID", nullable = false)
    private User createdBy;

    @NotNull(message = "Shift name is required")
    @Size(max = 255, message = "Shift name must be less than 255 characters")
    @Column(name = "ShiftName")
    private String shiftName;

    @NotNull(message = "Start time is required")
    @Column(name = "StartTime")
    private LocalDateTime startTime;

    @NotNull(message = "End time is required")
    @Column(name = "EndTime")
    private LocalDateTime endTime;

    @NotNull(message = "Break duration is required")
    @PositiveOrZero(message = "Break duration must be positive or zero")
    @Column(name = "BreakDuration")
    private int breakDuration;

    @OneToMany(mappedBy = "shift", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private Set<UserShifts> userShifts;
}